use clap::{Arg, ArgAction, Command};

pub fn app() -> Command {
    Command::new(clap::crate_name!())
    .version(clap::crate_version!())
    .author(clap::crate_authors!())
    .about(clap::crate_description!())

    .subcommand_required(true)
    .arg_required_else_help(true)

    .subcommand(Command::new("import")
      .about("Import from MSYT files to MSBT files")

      .arg(Arg::new("dir_mode")
        .help("Allow specifying directories. msyt will search for all files with the correct extension in the provided directories.")
        .short('d')
        .long("directories")
        .alias("directory")
        .action(ArgAction::SetTrue))

      .arg(Arg::new("no-backup")
        .help("Do not create a backup of any existing output files")
        .short('B')
        .long("no-backup")
        .action(ArgAction::SetTrue))

      .arg(Arg::new("extension")
        .help("The extension to use when exporting")
        .short('e')
        .long("extension")
        .alias("ext")
        .num_args(1)
        .default_value("msbt"))

      .arg(Arg::new("output")
        .help("The directory to place output files in. If not specified, output files will be placed next to input files.")
        .short('o')
        .long("output")
        .num_args(1))

      .arg(Arg::new("paths")
        .help("MSYT paths to import (MSBT files should be adjacent)")
        .required(true)
        .num_args(1..)))
    .subcommand(Command::new("create")
      .about("Create a MSBT file from a MSYT file")

      .arg(Arg::new("dir_mode")
        .help("Allow specifying directories. msyt will search for all files with the correct extension in the provided directories.")
        .short('d')
        .long("directories")
        .alias("directory")
        .action(ArgAction::SetTrue))

      .arg(Arg::new("no-backup")
        .help("Do not create a backup of any existing output files")
        .short('B')
        .long("no-backup")
        .action(ArgAction::SetTrue))

      .arg(Arg::new("extension")
        .help("The extension to use for output files")
        .short('e')
        .long("extension")
        .alias("ext")
        .num_args(1)
        .default_value("msbt"))

      .arg(Arg::new("platform")
        .help("The platform to create the MSBT for")
        .short('p')
        .long("platform")
        .num_args(1)
        .required(true)
        .value_parser(["switch", "wiiu"]))

      .arg(Arg::new("encoding")
        .help("The encoding to create the MSBT with")
        .short('E')
        .long("encoding")
        .num_args(1)
        .value_parser(["utf16", "utf8"])
        .default_value("utf16"))

      .arg(Arg::new("output")
        .help("The directory to place output files in")
        .short('o')
        .long("output")
        .num_args(1)
        .required(true))

      .arg(Arg::new("paths")
        .help("MSYT paths to create MSBT files from")
        .required(true)
        .num_args(1..)))
    .subcommand(Command::new("export")
      .about("Export from MSBT files to MSYT files")

      .arg(Arg::new("dir_mode")
        .help("Allow specifying directories. msyt will search for all files with the correct extension in the provided directories.")
        .short('d')
        .long("directories")
        .alias("directory")
        .action(ArgAction::SetTrue))

      .arg(Arg::new("output")
        .help("The directory to place output files in. If not specified, output files will be placed next to input files.")
        .short('o')
        .long("output")
        .num_args(1))

      .arg(Arg::new("paths")
        .help("MSBT paths to export")
        .required(true)
        .num_args(1..)))
}
